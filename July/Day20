class Solution {
public:
    int numMatchingSubseq(string s, vector<string>& words) {
       map<char,vector<int>>m;
        int count=0;
        for(int i=0;i<s.length();i++){
                m[s[i]].push_back(i);
        }
        
//        for(auto mapIt = begin(m); mapIt != end(m); ++mapIt)
//        {
//             std::cout << mapIt->first << " : ";

//             for(auto c : mapIt->second)
//             {
//                 std::cout << c << " ";
//             }

//             std::cout << std::endl;
//         }
        
        
        for(int i=0;i<words.size();i++){
            string str=words[i];
            int latest=-1;
            for(int j=0;j<str.length();j++){
               auto it=upper_bound(m[str[j]].begin(),m[str[j]].end(),latest);
                if(it==m[str[j]].end()) break;
                latest=*it;
                if(j==str.length()-1) count++;
            }
        }
        return count;
    }
};
