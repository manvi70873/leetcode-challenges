class Solution {
    
    int inf=1000001;
    int[][][] dp;
    
    
    public int minCost(int[] houses, int[][] cost, int m, int n, int target) {
         dp=new int[m][target+1][n+1];
        
        for(int i=0;i<m;i++){
            for(int j=0;j<=target;j++){
                for(int k=0;k<=n;k++){
                    dp[i][j][k]=-1;
                }
            }
        }
        
        
        int ans=dfs(houses,cost,m,n,target,0,0,0);
        return ans<inf?ans:-1;
    }
    
    
       
    
    int dfs(int[] houses, int[][] cost, int m, int n, int target,int i,int nbr,int left){
        
        
        
        //base cond
        
        if(i==m){
            return nbr==target?0:inf;
        }
        
        if(nbr>target) return inf;
        
        if(dp[i][nbr][left]!= -1){
            return dp[i][nbr][left];
        }
        
        if(houses[i]==0){//have to paint
            int mincost=inf;
            for(int c=1;c<=n;c++){
                int new_nbr=nbr;
            if(c!=left){
                new_nbr=nbr+1;
            }
                mincost=Math.min(mincost,cost[i][c-1]+dfs(houses,cost,m,n,target,i+1,new_nbr,c));
            }
            dp[i][nbr][left]=mincost;
            return dp[i][nbr][left];
        }
        else{//painted
            int  new_nbr=nbr;
            if(houses[i]!=left){
                new_nbr=nbr+1;
            }
            dp[i][nbr][left]= dfs(houses,cost,m,n,target,i+1,new_nbr,houses[i]);
            return dp[i][nbr][left];
        }
    }
    
}


