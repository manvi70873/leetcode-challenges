/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    
public:
    
        int camera_need=1;
        int monitered=-1;
        int is_camera=0;
        int count=0;
    
    
    int minCameraCover(TreeNode* root) {
        int p=rootinfo(root);
        if(p==camera_need){
            return count+1;
        }
        return count;
    }
    
    int rootinfo(TreeNode* root){
        if(root==NULL){
            return monitered;
        }
        
        int left=rootinfo(root->left);
        int right=rootinfo(root->right);
    
         if(left==camera_need || right==camera_need){
            count++;
            return is_camera;
        }
        
        else if(left==is_camera || right==is_camera){
            return monitered;
        }
        return camera_need;
    }
    
    
};
